// C√°c h√†m x·ª≠ l√Ω l·ªánh vƒÉn b·∫£n
import { EmbedBuilder } from 'discord.js';
import { events } from '../commands/createevent.js';

// H√†m x·ª≠ l√Ω l·ªánh ping
export async function handlePing(client, channel) {
  try {
    const sent = await channel.send('ƒêang t√≠nh to√°n ping...');
    const pingTime = sent.createdTimestamp - Date.now();
    const apiPing = Math.round(client.ws.ping);
    
    await sent.edit(`üèì Pong!\nüì∂ ƒê·ªô tr·ªÖ: ${pingTime}ms\nüåê API: ${apiPing}ms`);
  } catch (error) {
    console.error('L·ªói khi th·ª±c hi·ªán l·ªánh ping:', error);
    channel.send('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh ping.');
  }
}

// H√†m x·ª≠ l√Ω l·ªánh status
export async function handleStatus(client, channel) {
  try {
    // T√≠nh th·ªùi gian ho·∫°t ƒë·ªông
    const uptime = process.uptime();
    const days = Math.floor(uptime / 86400);
    const hours = Math.floor(uptime / 3600) % 24;
    const minutes = Math.floor(uptime / 60) % 60;
    const seconds = Math.floor(uptime % 60);
    
    // T√≠nh memory usage
    const memoryUsage = process.memoryUsage().heapUsed / 1024 / 1024;
    
    // T·∫°o embed
    const statusEmbed = new EmbedBuilder()
      .setColor(0x00FF00)
      .setTitle('Tr·∫°ng th√°i Bot')
      .addFields(
        { name: 'Th·ªùi gian ho·∫°t ƒë·ªông', value: `${days} ng√†y, ${hours} gi·ªù, ${minutes} ph√∫t, ${seconds} gi√¢y` },
        { name: 'ƒê·ªô tr·ªÖ', value: `${Math.round(client.ws.ping)}ms` },
        { name: 'B·ªô nh·ªõ s·ª≠ d·ª•ng', value: `${memoryUsage.toFixed(2)} MB` },
        { name: 'Phi√™n b·∫£n', value: 'v1.0.0' }
      )
      .setTimestamp();
    
    await channel.send({ embeds: [statusEmbed] });
  } catch (error) {
    console.error('L·ªói khi th·ª±c hi·ªán l·ªánh status:', error);
    channel.send('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh status.');
  }
}

// H√†m x·ª≠ l√Ω l·ªánh help
export async function handleHelp(channel) {
  try {
    // T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã tr·ª£ gi√∫p
    const helpEmbed = new EmbedBuilder()
      .setColor(0x0099ff)
      .setTitle('Danh s√°ch l·ªánh')
      .setDescription('D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c l·ªánh c√≥ s·∫µn:')
      .addFields(
        {
          name: 'Qu·∫£n l√Ω vai tr√≤',
          value: '`!addrole @user @role` - Th√™m vai tr√≤ cho ng∆∞·ªùi d√πng\n`!editrole @user @oldrole @newrole` - Thay ƒë·ªïi vai tr√≤ c·ªßa ng∆∞·ªùi d√πng\n`!removerole @user @role` - X√≥a vai tr√≤ c·ªßa ng∆∞·ªùi d√πng'
        },
        {
          name: 'Qu·∫£n l√Ω s·ª± ki·ªán',
          value: '`!createevent <name> <description> <datetime>` - T·∫°o s·ª± ki·ªán m·ªõi\n`!joinevent <ID>` - Tham gia s·ª± ki·ªán\n`!listevents` - Li·ªát k√™ t·∫•t c·∫£ s·ª± ki·ªán'
        },
        {
          name: 'Kh√°c',
          value: '`!help` - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n`!ping` - Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot\n`!status` - Ki·ªÉm tra tr·∫°ng th√°i c·ªßa bot'
        }
      )
      .setTimestamp()
      .setFooter({ text: 'S·ª≠ d·ª•ng ! l√†m prefix cho c√°c l·ªánh' });
    
    await channel.send({ embeds: [helpEmbed] });
  } catch (error) {
    console.error('L·ªói khi th·ª±c hi·ªán l·ªánh help:', error);
    channel.send('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh help.');
  }
}

// H√†m x·ª≠ l√Ω l·ªánh addrole
export async function handleAddRole(author, channel) {
  try {
    // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
    const member = channel.guild.members.cache.get(author.id);
    if (!member.permissions.has('ManageRoles')) {
      return channel.send('B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω vai tr√≤!');
    }
    
    // Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    const mentionedUsers = Array.from(channel.messages.cache.last().mentions.users.values());
    const mentionedRoles = Array.from(channel.messages.cache.last().mentions.roles.values());
    
    if (mentionedUsers.length === 0 || mentionedRoles.length === 0) {
      return channel.send('Vui l√≤ng ƒë·ªÅ c·∫≠p ƒë·∫øn ng∆∞·ªùi d√πng v√† vai tr√≤! V√≠ d·ª•: !addrole @user @role');
    }
    
    const targetUser = mentionedUsers[0];
    const role = mentionedRoles[0];
    
    // L·∫•y th√¥ng tin member t·ª´ guild
    const guild = channel.guild;
    const targetMember = await guild.members.fetch(targetUser.id);
    
    // Ki·ªÉm tra quy·ªÅn c·ªßa bot
    if (!guild.members.me.permissions.has('ManageRoles')) {
      return channel.send('Bot kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω vai tr√≤!');
    }
    
    // Ki·ªÉm tra v·ªã tr√≠ vai tr√≤
    if (role.position >= guild.members.me.roles.highest.position) {
      return channel.send('Bot kh√¥ng th·ªÉ th√™m vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng vai tr√≤ cao nh·∫•t c·ªßa bot!');
    }
    
    // Th√™m vai tr√≤
    await targetMember.roles.add(role);
    channel.send(`ƒê√£ th√™m vai tr√≤ ${role.name} cho ${targetUser.username}!`);
  } catch (error) {
    console.error('L·ªói khi th·ª±c hi·ªán l·ªánh addrole:', error);
    channel.send('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh addrole.');
  }
}

// H√†m x·ª≠ l√Ω l·ªánh editrole
export async function handleEditRole(author, channel) {
  try {
    // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
    const member = channel.guild.members.cache.get(author.id);
    if (!member.permissions.has('ManageRoles')) {
      return channel.send('B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω vai tr√≤!');
    }
    
    // Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    const mentionedUsers = Array.from(channel.messages.cache.last().mentions.users.values());
    const mentionedRoles = Array.from(channel.messages.cache.last().mentions.roles.values());
    
    if (mentionedUsers.length === 0 || mentionedRoles.length < 2) {
      return channel.send('Vui l√≤ng ƒë·ªÅ c·∫≠p ƒë·∫øn ng∆∞·ªùi d√πng, vai tr√≤ c≈© v√† vai tr√≤ m·ªõi! V√≠ d·ª•: !editrole @user @oldrole @newrole');
    }
    
    const targetUser = mentionedUsers[0];
    const oldRole = mentionedRoles[0];
    const newRole = mentionedRoles[1];
    
    // L·∫•y th√¥ng tin member t·ª´ guild
    const guild = channel.guild;
    const targetMember = await guild.members.fetch(targetUser.id);
    
    // Ki·ªÉm tra quy·ªÅn c·ªßa bot
    if (!guild.members.me.permissions.has('ManageRoles')) {
      return channel.send('Bot kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω vai tr√≤!');
    }
    
    // Ki·ªÉm tra v·ªã tr√≠ vai tr√≤
    if (oldRole.position >= guild.members.me.roles.highest.position || 
        newRole.position >= guild.members.me.roles.highest.position) {
      return channel.send('Bot kh√¥ng th·ªÉ qu·∫£n l√Ω vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng vai tr√≤ cao nh·∫•t c·ªßa bot!');
    }
    
    // X√≥a vai tr√≤ c≈© v√† th√™m vai tr√≤ m·ªõi
    await targetMember.roles.remove(oldRole);
    await targetMember.roles.add(newRole);
    channel.send(`ƒê√£ thay ƒë·ªïi vai tr√≤ t·ª´ ${oldRole.name} sang ${newRole.name} cho ${targetUser.username}!`);
  } catch (error) {
    console.error('L·ªói khi th·ª±c hi·ªán l·ªánh editrole:', error);
    channel.send('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh editrole.');
  }
}

// H√†m x·ª≠ l√Ω l·ªánh removerole
export async function handleRemoveRole(author, channel) {
  try {
    // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
    const member = channel.guild.members.cache.get(author.id);
    if (!member.permissions.has('ManageRoles')) {
      return channel.send('B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω vai tr√≤!');
    }
    
    // Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    const mentionedUsers = Array.from(channel.messages.cache.last().mentions.users.values());
    const mentionedRoles = Array.from(channel.messages.cache.last().mentions.roles.values());
    
    if (mentionedUsers.length === 0 || mentionedRoles.length === 0) {
      return channel.send('Vui l√≤ng ƒë·ªÅ c·∫≠p ƒë·∫øn ng∆∞·ªùi d√πng v√† vai tr√≤! V√≠ d·ª•: !removerole @user @role');
    }
    
    const targetUser = mentionedUsers[0];
    const role = mentionedRoles[0];
    
    // L·∫•y th√¥ng tin member t·ª´ guild
    const guild = channel.guild;
    const targetMember = await guild.members.fetch(targetUser.id);
    
    // Ki·ªÉm tra quy·ªÅn c·ªßa bot
    if (!guild.members.me.permissions.has('ManageRoles')) {
      return channel.send('Bot kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω vai tr√≤!');
    }
    
    // Ki·ªÉm tra v·ªã tr√≠ vai tr√≤
    if (role.position >= guild.members.me.roles.highest.position) {
      return channel.send('Bot kh√¥ng th·ªÉ x√≥a vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng vai tr√≤ cao nh·∫•t c·ªßa bot!');
    }
    
    // X√≥a vai tr√≤
    await targetMember.roles.remove(role);
    channel.send(`ƒê√£ x√≥a vai tr√≤ ${role.name} c·ªßa ${targetUser.username}!`);
  } catch (error) {
    console.error('L·ªói khi th·ª±c hi·ªán l·ªánh removerole:', error);
    channel.send('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh removerole.');
  }
}

// H√†m x·ª≠ l√Ω l·ªánh createevent
export async function handleCreateEvent(author, args, channel) {
  try {
    // Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    const parts = args.split(' ');
    if (parts.length < 3) {
      return channel.send('Vui l√≤ng cung c·∫•p ƒë·ªß th√¥ng tin! V√≠ d·ª•: !createevent T√™n "M√¥ t·∫£" "YYYY-MM-DD HH:MM"');
    }
    
    // T√¨m v·ªã tr√≠ c·ªßa c√°c d·∫•u ngo·∫∑c k√©p ƒë·ªÉ tr√≠ch xu·∫•t m√¥ t·∫£
    const firstQuote = args.indexOf('"');
    const secondQuote = args.indexOf('"', firstQuote + 1);
    const thirdQuote = args.indexOf('"', secondQuote + 1);
    const fourthQuote = args.indexOf('"', thirdQuote + 1);
    
    if (firstQuote === -1 || secondQuote === -1 || thirdQuote === -1 || fourthQuote === -1) {
      return channel.send('Vui l√≤ng s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p cho m√¥ t·∫£ v√† th·ªùi gian! V√≠ d·ª•: !createevent T√™n "M√¥ t·∫£" "YYYY-MM-DD HH:MM"');
    }
    
    const eventName = args.substring(0, firstQuote).trim();
    const eventDescription = args.substring(firstQuote + 1, secondQuote);
    const eventDateTime = args.substring(thirdQuote + 1, fourthQuote);
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng th·ªùi gian
    const dateRegex = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}$/;
    if (!dateRegex.test(eventDateTime)) {
      return channel.send('ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng YYYY-MM-DD HH:MM.');
    }
    
    // T·∫°o ID s·ª± ki·ªán
    const eventId = `EV${events.size + 1}`;
    
    // L∆∞u th√¥ng tin s·ª± ki·ªán
    events.set(eventId, {
      id: eventId,
      name: eventName,
      description: eventDescription,
      dateTime: eventDateTime,
      creator: author.id,
      createdAt: new Date().toISOString(),
      participants: [author.id]
    });
    
    // T·∫°o embed ƒë·ªÉ th√¥ng b√°o s·ª± ki·ªán
    const eventEmbed = new EmbedBuilder()
      .setColor(0x0099ff)
      .setTitle(`S·ª± ki·ªán m·ªõi: ${eventName}`)
      .setDescription(eventDescription)
      .addFields(
        { name: 'ID', value: eventId },
        { name: 'Th·ªùi gian', value: eventDateTime },
        { name: 'Ng∆∞·ªùi t·∫°o', value: `<@${author.id}>` }
      )
      .setTimestamp()
      .setFooter({ text: `S·ª≠ d·ª•ng !joinevent ${eventId} ƒë·ªÉ tham gia` });
    
    await channel.send({ embeds: [eventEmbed] });
    
    // Thi·∫øt l·∫≠p nh·∫Øc nh·ªü tr∆∞·ªõc 1 gi·ªù
    const eventDate = new Date(eventDateTime);
    const reminderDate = new Date(eventDate.getTime() - 60 * 60 * 1000); // 1 gi·ªù tr∆∞·ªõc
    const now = new Date();
    
    if (reminderDate > now) {
      const timeUntilReminder = reminderDate.getTime() - now.getTime();
      setTimeout(() => {
        // L·∫•y danh s√°ch ng∆∞·ªùi tham gia
        const event = events.get(eventId);
        if (event) {
          const participantMentions = event.participants.map(id => `<@${id}>`).join(' ');
          channel.send(`${participantMentions} Nh·∫Øc nh·ªü: S·ª± ki·ªán "${eventName}" s·∫Ω di·ªÖn ra sau 1 gi·ªù n·ªØa!`);
        }
      }, timeUntilReminder);
    }
    
    console.log(`S·ª± ki·ªán ${eventId} ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi ${author.username}`);
  } catch (error) {
    console.error('L·ªói khi th·ª±c hi·ªán l·ªánh createevent:', error);
    channel.send('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh createevent.');
  }
}

// H√†m x·ª≠ l√Ω l·ªánh joinevent
export async function handleJoinEvent(author, args, channel) {
  try {
    // Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    const eventId = args.trim();
    
    // Ki·ªÉm tra s·ª± ki·ªán c√≥ t·ªìn t·∫°i kh√¥ng
    if (!events.has(eventId)) {
      return channel.send(`Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID: ${eventId}`);
    }
    
    // L·∫•y th√¥ng tin s·ª± ki·ªán
    const event = events.get(eventId);
    
    // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ tham gia ch∆∞a
    if (event.participants.includes(author.id)) {
      return channel.send('B·∫°n ƒë√£ tham gia s·ª± ki·ªán n√†y r·ªìi!');
    }
    
    // Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch tham gia
    event.participants.push(author.id);
    
    // C·∫≠p nh·∫≠t s·ª± ki·ªán
    events.set(eventId, event);
    
    channel.send(`<@${author.id}> ƒë√£ tham gia s·ª± ki·ªán "${event.name}"!`);
    console.log(`${author.username} ƒë√£ tham gia s·ª± ki·ªán ${eventId}`);
  } catch (error) {
    console.error('L·ªói khi th·ª±c hi·ªán l·ªánh joinevent:', error);
    channel.send('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh joinevent.');
  }
}

// H√†m x·ª≠ l√Ω l·ªánh listevents
export async function handleListEvents(channel) {
  try {
    // Ki·ªÉm tra c√≥ s·ª± ki·ªán n√†o kh√¥ng
    if (events.size === 0) {
      return channel.send('Hi·ªán t·∫°i kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c t·∫°o!');
    }
    
    // T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch s·ª± ki·ªán
    const eventListEmbed = new EmbedBuilder()
      .setColor(0x0099ff)
      .setTitle('Danh s√°ch s·ª± ki·ªán')
      .setDescription('D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c s·ª± ki·ªán hi·ªán c√≥:')
      .setTimestamp()
      .setFooter({ text: 'S·ª≠ d·ª•ng !joinevent <ID> ƒë·ªÉ tham gia s·ª± ki·ªán' });
    
    // Th√™m th√¥ng tin t·ª´ng s·ª± ki·ªán v√†o embed
    events.forEach(event => {
      // T√≠nh s·ªë ng∆∞·ªùi tham gia
      const participantCount = event.participants.length;
      
      // Th√™m field cho s·ª± ki·ªán
      eventListEmbed.addFields({
        name: `${event.name} (ID: ${event.id})`,
        value: `M√¥ t·∫£: ${event.description}\nTh·ªùi gian: ${event.dateTime}\nS·ªë ng∆∞·ªùi tham gia: ${participantCount}\nNg∆∞·ªùi t·∫°o: <@${event.creator}>`
      });
    });
    
    await channel.send({ embeds: [eventListEmbed] });
  } catch (error) {
    console.error('L·ªói khi th·ª±c hi·ªán l·ªánh listevents:', error);
    channel.send('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh listevents.');
  }
}